#version log
#v0.1 - battery measurement and BLE read working
#v0.3 
	# repurpose P0_1 as output for baterry indicator RED LED
	# introduce 5 sec timout to stop timer from calling do_spi() and wake-up CC
	# buzzer activate when low battery
	# introduce wake-up int for CC
#v0.4
	# remove "introduce 5 sec timout to stop timer from calling do_spi() and wake-up CC"
	# remove "introduce wake-up int for CC"
#v3.0
	# version changed to "3.0"
#v3.0.1
	# light red and green leds for 2 seconds at start-up
	# increase green blink frequency to 1Hz 
	# version updated to "3.0.1"
	
#todo


dim tmp(2)
dim spi_in_buf(255)
dim spi_in_buf_len
dim spi_out_buf(255)
dim spi_out_buf_len
# 1 = waiting for ble client to read bytes from data attr.
# We halt spi comms until this happens. Crude flow control.
dim waiting_for_client
dim connected
dim slave_bytes_avail
dim spi_xfer_size
dim spi_batch_size
dim spi_batch_offset
dim name(32)
dim name_len
dim result
dim channel
dim continue
dim escaping
dim bytes_to_send
dim tlen
dim idx
dim response_count
dim expected_length
dim send_idx
dim chunk_size
dim in_spi
dim led_timer
dim timer_tick_count
dim timer_update_count
dim led_mode
dim num_iterations

#variable to save handle
dim batconn_handle

#store battery measurement result
dim batresult

event system_boot(major,minor,patch,build,ll_version,protocol,hw)
	batconn_handle=$ff
	name_len=0
	response_count=0
	in_spi=0
	led_mode=0
	batresult=100
  
	call flash_ps_load($8000)(result, name_len, name(0:name_len))
	if result != 0 then
		name_len = 9
		name(0:1) = $52 # R
		name(1:1) = $69 # i
		name(2:1) = $6c # l
		name(3:1) = $65 # e
		name(4:1) = $79 # y
		name(5:1) = $4c # L
		name(6:1) = $69 # i
		name(7:1) = $6e # n
		name(8:1) = $6b # k
	end if

	
	call gap_set_mode(gap_general_discoverable,gap_undirected_connectable) #start advertising in connectible mode

	call hardware_io_port_config_direction(0, $13) #Make P0_0 (green led), P0_1 (red led), P0_4 (SPI_SS) as outputs
	
	call hardware_io_port_write(0, $10, 1) #disable SPI_S
	
	call hardware_io_port_write(0, $3, 0) #Turn P0_0 (green led), P0_1 (red led) off
	#wait 2s
	num_iterations = 4240
	while num_iterations > 0
		num_iterations = num_iterations - 1
	end while
	call hardware_io_port_write(0, $3, 3) #Turn P0_0 (green led), P0_1 (red led) off
	
	call hardware_io_port_config_direction(1, $03) #Make P1_0 (buzz1), P1_1 (buzz2)
	
	memset(spi_out_buf(0), $11, 255) #Init output buffer

	call attributes_write(xgatt_name, 0, name_len, name(0:name_len))
	call attributes_write(xgatt_custom_name, 0, name_len, name(0:name_len))
	
	call hardware_set_soft_timer($666, 1, 0) #Start ~50ms timer
end

procedure do_spi()
  if in_spi = 1 then
    return
  end if

  in_spi = 1
  
  call hardware_io_port_write(0, $10, 0) #activeaza SPI_SS

  # Do not send length byte at beginning of spi_out_buf
  if spi_out_buf_len > 0 then
    spi_out_buf_len = spi_out_buf_len - 1
  end if

  tmp(0:1) = $99
  tmp(1:1) = spi_out_buf_len
  #comunica cat de mult are de transmis si afla cat de mult are de receptionat
  call hardware_spi_transfer(0,2,tmp(0:2))(result,channel,tlen,tmp(0:2)) 
  slave_bytes_avail = tmp(1:1)
  #foloseste cea mai mare lungime dintre datele de trimis si cele de primit
  spi_xfer_size = slave_bytes_avail
  if spi_out_buf_len > spi_xfer_size then
    spi_xfer_size = spi_out_buf_len
  end if

  spi_batch_size = spi_xfer_size
  spi_batch_offset = 0
  if spi_batch_size > 10 then
    spi_batch_size = 10
  end if

  #transmite tot ce are de transmis sau mai mult in cazul in care are mai multe de receptionat
  while spi_batch_size > 0 
    call hardware_spi_transfer(0,spi_batch_size,spi_out_buf(spi_batch_offset+1:spi_batch_size))(result,channel,tlen,spi_in_buf(spi_batch_offset:spi_batch_size))
    spi_batch_offset = spi_batch_offset + spi_batch_size
    spi_batch_size = spi_xfer_size - spi_batch_offset
    if spi_batch_size > 10 then
      spi_batch_size = 10
    end if
  end while

  memset(spi_out_buf(0), $11, spi_out_buf_len)
  spi_out_buf_len = 0
  spi_in_buf_len = slave_bytes_avail

  call hardware_io_port_write(0, $10, $10) #dezactiveaza SPI_SS

  if slave_bytes_avail > 0 then #am receptionat ceva
    waiting_for_client = 1 #nu mai citim nimic de la SPI pana cand nu trimitem prin BLE
    response_count = response_count + 1 #numarul de raspunsuri de la PAD
    call attributes_write(xgatt_response_count,0,1,response_count)
    #call set_data_led(1) //this output is now used for battery indicator LED
  end if

  in_spi = 0
end

event attributes_value(connection, reason, handle, offset, value_len, value_data)

  if handle = xgatt_custom_name then
    memcpy(name(0), value_data(0), value_len)
    name_len = value_len
    call connection_disconnect(connection)
  end if

  if handle = xgatt_data then
    if offset = 0 then
      expected_length = value_data(0:1) + 1
      waiting_for_client = 0
    end if
    spi_out_buf(offset:value_len) = value_data(0:value_len)

    # Write to SPI if finished
    if offset + value_len = expected_length then #am primit pachetul complet prin BLE
      spi_out_buf_len = expected_length
      if waiting_for_client != 1 #nu asteptam sa trimitem ceva prin BLE
		
		#call power_on_CC()	#activate power to CC and wait for it to stabilize
		
        call do_spi()  #trebuie sa trimitem prin SPI la CC -> POD; comunicarea cu POD incepe (1)
      end if
    end if
  end if

  if handle = xgatt_led_mode then
    # call set_led_mode(value_data(0:1)) //don't play with the RED led via BLE
  end if

  if reason = 2 then # User requesting response
    call attributes_user_write_response(connection, 0)
  end if
end

event attributes_user_read_request(connection, handle, offset, maxsize)
  if handle = xgatt_battery then
    batconn_handle=connection
	# trigger ADC read on P0_6, full 12-bit decimation, 1.24v reference
    call hardware_adc_read(6, 3, 0)
  end if

  if handle = xgatt_data then #Riley vrea sa citeasca prin BLE

    if waiting_for_client = 1 then #te asteptam cu date, bine ai venit :)
      bytes_to_send = spi_in_buf_len - offset
      if bytes_to_send > maxsize then
        bytes_to_send = maxsize
      end if
      call attributes_user_read_response(connection,0,bytes_to_send,spi_in_buf(offset:bytes_to_send)) #trimite maxsize
      if offset + maxsize > spi_in_buf_len then #am trimis tot
        waiting_for_client = 0 #deci nu mai e nimic de trimis
      end if
    else
      # No data to send
      waiting_for_client = 0
      call attributes_user_read_response(connection,0,0,spi_in_buf(0:0))
    end if

    if waiting_for_client = 0 #nimic care asteapta sa fie trimis prin BLE
      # call set_data_led(0)
      call do_spi() #dar poate avem ceva date noi de la POD via CC via SPI?
    end if

  end if

  if handle = xgatt_led_mode then
    call hardware_io_port_write(0, $10, $10)
    call attributes_user_read_response(connection,0,1,led_mode)
  end if

end

event hardware_adc_result(input,value)
  #scale value to range 0-100
  #measurement range is 32768=1.24v*3.49=4.32V
  #new battery ADC measurement is 31782=4.32v
  #minimum battery voltage is 3.0v=3.0v/4.32v*32768= 22756
  #31782-22756=9026

  batresult=(value-22756)*100/9026
  
  #clip to 100%
  if batresult>100 then
    batresult=100
  end if
  
  #clip to 0%
  if batresult<0 then
    batresult=0
  end if

  tmp(0:1)=batresult

  if batconn_handle<$ff then    #if connection handle is valid
    call attributes_user_read_response(batconn_handle,0,1,tmp(0:1))
    batconn_handle=$ff
  end if
end

# Timer event listener to poll data from spi
event hardware_soft_timer(handle)
	if waiting_for_client != 1 && connected = 1 then #nu avem ceva de trimis prin BLE, hai sa verificam daca sunt date noi de la POD
		call do_spi()
	end if

	led_timer = led_timer + 1 					#increment every 50ms
	if led_timer=20 then 						#blink led(s) every 1 seconds
		if batresult<20 then 						#battery below 20% capacity and connected
			call hardware_io_port_write(0, 2, 0) 	#light only battery warning led
			call hardware_io_port_write(0, 2, 2)	#battery warning led off
			led_timer=led_timer+10 					#increment for the passed 500ms
			timer_tick_count=timer_tick_count+1		#increment for the passed 500ms
		else										#battery is still ok
			if connected=1 then						#and BLE is connected
				call hardware_io_port_write(0, 1, 0) #light connected led
			end if
		end if
	end if 
  
	if led_timer>22 then 						#reset after 1.1s
		led_timer=0
		call hardware_adc_read(6, 3, 0)				#trigger ADC read on P0_6, full 12-bit decimation, 1.24v reference
		call hardware_io_port_write(0, $1, 1)		#connection led off
	end if 
  
	timer_tick_count = timer_tick_count + 1
	if timer_tick_count > 1200 #1200 ticks of a 50ms timer is ~1min
		timer_tick_count = 0
		timer_update_count = timer_update_count + 1
		call attributes_write(xgatt_timer_tick,0,1,timer_update_count) #updates the rileylink_ios-master for timeout checking
	end if
end


# Connection event listener
event connection_status(connection, flags, address, address_type, conn_interval, timeout, latency, bonding)
  # Device is connected. Turn on green led
  # call hardware_io_port_write(0, $1, $1)
  connected = 1

  # Drop any data what was waiting to go to client from
  # previous connection.
  waiting_for_client = 0
  spi_in_buf_len = 0
  slave_bytes_avail = 0

end

event connection_disconnected(handle,res)
  #start advertising again after disconnection
  call gap_set_mode(gap_general_discoverable,gap_undirected_connectable)
  # Device disconnected. Turn off green led
  # call hardware_io_port_write(0, $1, $0)
  connected = 0

  # Save name
  if name_len > 0
    call attributes_write(xgatt_name, 0, name_len, name(0:name_len))
    call flash_ps_save($8000, name_len, name(0:name_len))
  end if

end
